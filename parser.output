Rules useless in parser due to conflicts

    2 declaration_list_opt: ε
    3                     | declaration_list


State 0 conflicts: 4 shift/reduce
State 7 conflicts: 4 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declaration_list_opt function_list

    2 declaration_list_opt: ε
    3                     | declaration_list

    4 declaration_list: declaration_list declaration SEMI
    5                 | declaration SEMI

    6 function_list: function_list function
    7              | function

    8 function: function_definition

    9 function_definition: type_specifier main_or_id LPAREN parameter_list_opt RPAREN compound_stmt
   10                    | type_specifier main_or_id LPAREN parameter_list_opt RPAREN SEMI

   11 main_or_id: MAIN
   12           | IDENTIFIER

   13 type_specifier: INT
   14               | FLOAT
   15               | BOOL
   16               | VOID

   17 parameter_list_opt: ε
   18                   | parameter_list

   19 parameter_list: parameter_declaration
   20               | parameter_declaration COMMA parameter_list

   21 parameter_declaration: type_specifier IDENTIFIER

   22 compound_stmt: LBRACE stmt_list_opt RBRACE

   23 stmt_list_opt: ε
   24              | stmt_list

   25 stmt_list: stmt_list stmt
   26          | stmt

   27 stmt: IDENTIFIER ASSIGN expr SEMI
   28     | IDENTIFIER INCR SEMI
   29     | IDENTIFIER DECR SEMI
   30     | INCR IDENTIFIER SEMI
   31     | DECR IDENTIFIER SEMI
   32     | function_call SEMI
   33     | PRINTF LPAREN arg_list RPAREN SEMI
   34     | SCANF LPAREN IDENTIFIER RPAREN SEMI
   35     | FOR LPAREN init_expr SEMI expr SEMI update_expr RPAREN compound_stmt
   36     | WHILE LPAREN expr RPAREN compound_stmt
   37     | IF LPAREN expr RPAREN compound_stmt
   38     | IF LPAREN expr RPAREN compound_stmt ELSE compound_stmt
   39     | RETURN expr SEMI
   40     | SWITCH LPAREN expr RPAREN LBRACE case_list RBRACE
   41     | declaration SEMI

   42 function_call: IDENTIFIER LPAREN arg_list_opt RPAREN

   43 init_expr: declaration
   44          | IDENTIFIER ASSIGN expr

   45 update_expr: IDENTIFIER INCR
   46            | IDENTIFIER DECR
   47            | IDENTIFIER ASSIGN expr

   48 declaration: type_specifier var_list

   49 var_list: var_decl
   50         | var_list COMMA var_decl

   51 var_decl: IDENTIFIER
   52         | IDENTIFIER ASSIGN expr

   53 case_list: case_list case_stmt
   54          | case_stmt

   55 case_stmt: CASE NUMBER COLON stmt_list BREAK SEMI
   56          | DEFAULT COLON stmt_list BREAK SEMI
   57          | DEFAULT COLON stmt_list

   58 expr: expr OR expr
   59     | expr EQ expr
   60     | expr GT expr
   61     | expr LT expr
   62     | expr LE expr
   63     | expr PLUS expr
   64     | expr MINUS expr
   65     | expr MULT expr
   66     | expr DIV expr
   67     | expr MOD expr
   68     | expr GE expr
   69     | expr NEQ expr
   70     | expr AND expr
   71     | NOT expr
   72     | LPAREN expr RPAREN
   73     | IDENTIFIER
   74     | TRUE
   75     | FALSE
   76     | NUMBER
   77     | FLOAT
   78     | IDENTIFIER LPAREN arg_list_opt RPAREN
   79     | STRING

   80 arg_list_opt: ε
   81             | arg_list

   82 arg_list: expr
   83         | arg_list COMMA expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    THEN (258)
    INT (259) 13
    FLOAT (260) 14 77
    BOOL (261) 15
    RETURN (262) 39
    VOID (263) 16
    MAIN (264) 11
    PRINTF (265) 33
    SCANF (266) 34
    FOR (267) 35
    IF (268) 37 38
    ELSE (269) 38
    WHILE (270) 36
    SWITCH (271) 40
    CASE (272) 55
    TRUE (273) 74
    FALSE (274) 75
    BREAK (275) 55 56
    DEFAULT (276) 56 57
    STRING (277) 79
    IDENTIFIER (278) 12 21 27 28 29 30 31 34 42 44 45 46 47 51 52 73 78
    NUMBER (279) 55 76
    PLUS (280) 63
    MINUS (281) 64
    MULT (282) 65
    DIV (283) 66
    MOD (284) 67
    ASSIGN (285) 27 44 47 52
    LPAREN (286) 9 10 33 34 35 36 37 38 40 42 72 78
    RPAREN (287) 9 10 33 34 35 36 37 38 40 42 72 78
    LBRACE (288) 22 40
    RBRACE (289) 22 40
    SEMI (290) 4 5 10 27 28 29 30 31 32 33 34 35 39 41 55 56
    LE (291) 62
    LT (292) 61
    GT (293) 60
    GE (294) 68
    EQ (295) 59
    NEQ (296) 69
    OR (297) 58
    AND (298) 70
    NOT (299) 71
    COMMA (300) 20 50 83
    INCR (301) 28 30 45
    DECR (302) 29 31 46
    COLON (303) 55 56 57


Nonterminals, with rules where they appear

    $accept (49)
        on left: 0
    program (50)
        on left: 1
        on right: 0
    declaration_list_opt (51)
        on left: 2 3
        on right: 1
    declaration_list (52)
        on left: 4 5
        on right: 3 4
    function_list (53)
        on left: 6 7
        on right: 1 6
    function (54)
        on left: 8
        on right: 6 7
    function_definition (55)
        on left: 9 10
        on right: 8
    main_or_id (56)
        on left: 11 12
        on right: 9 10
    type_specifier (57)
        on left: 13 14 15 16
        on right: 9 10 21 48
    parameter_list_opt (58)
        on left: 17 18
        on right: 9 10
    parameter_list (59)
        on left: 19 20
        on right: 18 20
    parameter_declaration (60)
        on left: 21
        on right: 19 20
    compound_stmt (61)
        on left: 22
        on right: 9 35 36 37 38
    stmt_list_opt (62)
        on left: 23 24
        on right: 22
    stmt_list (63)
        on left: 25 26
        on right: 24 25 55 56 57
    stmt (64)
        on left: 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
        on right: 25 26
    function_call (65)
        on left: 42
        on right: 32
    init_expr (66)
        on left: 43 44
        on right: 35
    update_expr (67)
        on left: 45 46 47
        on right: 35
    declaration (68)
        on left: 48
        on right: 4 5 41 43
    var_list (69)
        on left: 49 50
        on right: 48 50
    var_decl (70)
        on left: 51 52
        on right: 49 50
    case_list (71)
        on left: 53 54
        on right: 40 53
    case_stmt (72)
        on left: 55 56 57
        on right: 53 54
    expr (73)
        on left: 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79
        on right: 27 35 36 37 38 39 40 44 47 52 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 82 83
    arg_list_opt (74)
        on left: 80 81
        on right: 42 78
    arg_list (75)
        on left: 82 83
        on right: 33 81 83


State 0

    0 $accept: • program $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    BOOL   shift, and go to state 3
    VOID   shift, and go to state 4

    INT    [reduce using rule 2 (declaration_list_opt)]
    FLOAT  [reduce using rule 2 (declaration_list_opt)]
    BOOL   [reduce using rule 2 (declaration_list_opt)]
    VOID   [reduce using rule 2 (declaration_list_opt)]

    program               go to state 5
    declaration_list_opt  go to state 6
    declaration_list      go to state 7
    type_specifier        go to state 8
    declaration           go to state 9

    shift/reduce conflict on token INT:
        2 declaration_list_opt: ε •
       13 type_specifier: • INT
      First example: • INT var_list SEMI function_list $end
      Shift derivation
        $accept
        ↳ 0: program                                                         $end
             ↳ 1: declaration_list_opt                         function_list
                  ↳ 3: declaration_list
                       ↳ 5: declaration                   SEMI
                            ↳ 48: type_specifier var_list
                                  ↳ 13: • INT
      Second example: • INT main_or_id LPAREN parameter_list_opt RPAREN compound_stmt $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                           $end
             ↳ 1: declaration_list_opt function_list
                  ↳ 2: ε •             ↳ 7: function
                                            ↳ 8: function_definition
                                                 ↳ 9: type_specifier main_or_id LPAREN parameter_list_opt RPAREN compound_stmt
                                                      ↳ 13: INT

    shift/reduce conflict on token FLOAT:
        2 declaration_list_opt: ε •
       14 type_specifier: • FLOAT
      First example: • FLOAT var_list SEMI function_list $end
      Shift derivation
        $accept
        ↳ 0: program                                                         $end
             ↳ 1: declaration_list_opt                         function_list
                  ↳ 3: declaration_list
                       ↳ 5: declaration                   SEMI
                            ↳ 48: type_specifier var_list
                                  ↳ 14: • FLOAT
      Second example: • FLOAT main_or_id LPAREN parameter_list_opt RPAREN compound_stmt $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                           $end
             ↳ 1: declaration_list_opt function_list
                  ↳ 2: ε •             ↳ 7: function
                                            ↳ 8: function_definition
                                                 ↳ 9: type_specifier main_or_id LPAREN parameter_list_opt RPAREN compound_stmt
                                                      ↳ 14: FLOAT

    shift/reduce conflict on token BOOL:
        2 declaration_list_opt: ε •
       15 type_specifier: • BOOL
      First example: • BOOL var_list SEMI function_list $end
      Shift derivation
        $accept
        ↳ 0: program                                                         $end
             ↳ 1: declaration_list_opt                         function_list
                  ↳ 3: declaration_list
                       ↳ 5: declaration                   SEMI
                            ↳ 48: type_specifier var_list
                                  ↳ 15: • BOOL
      Second example: • BOOL main_or_id LPAREN parameter_list_opt RPAREN compound_stmt $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                           $end
             ↳ 1: declaration_list_opt function_list
                  ↳ 2: ε •             ↳ 7: function
                                            ↳ 8: function_definition
                                                 ↳ 9: type_specifier main_or_id LPAREN parameter_list_opt RPAREN compound_stmt
                                                      ↳ 15: BOOL

    shift/reduce conflict on token VOID:
        2 declaration_list_opt: ε •
       16 type_specifier: • VOID
      First example: • VOID var_list SEMI function_list $end
      Shift derivation
        $accept
        ↳ 0: program                                                         $end
             ↳ 1: declaration_list_opt                         function_list
                  ↳ 3: declaration_list
                       ↳ 5: declaration                   SEMI
                            ↳ 48: type_specifier var_list
                                  ↳ 16: • VOID
      Second example: • VOID main_or_id LPAREN parameter_list_opt RPAREN compound_stmt $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                                           $end
             ↳ 1: declaration_list_opt function_list
                  ↳ 2: ε •             ↳ 7: function
                                            ↳ 8: function_definition
                                                 ↳ 9: type_specifier main_or_id LPAREN parameter_list_opt RPAREN compound_stmt
                                                      ↳ 16: VOID



State 1

   13 type_specifier: INT •

    $default  reduce using rule 13 (type_specifier)


State 2

   14 type_specifier: FLOAT •

    $default  reduce using rule 14 (type_specifier)


State 3

   15 type_specifier: BOOL •

    $default  r